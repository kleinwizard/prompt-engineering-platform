// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  avatar        String?
  bio           String?
  website       String?
  location      String?
  timezone      String   @default("UTC")
  emailVerified DateTime?
  lastActive    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User preferences
  preferences   UserPreferences?
  
  // Authentication
  accounts      Account[]
  sessions      Session[]
  
  // Core features
  prompts       Prompt[]
  templates     Template[]
  
  // Gamification
  profile       UserProfile?
  badges        UserBadge[]
  achievements  Achievement[]
  
  // Skills
  skills        UserSkills?
  assessments   SkillAssessment[]
  
  // Learning
  lessonProgress LessonProgress[]
  learningPaths  UserLearningPath[]
  
  // Community
  followers     Follow[] @relation("UserFollows")
  following     Follow[] @relation("UserFollowers")
  likes         Like[]
  comments      Comment[]
  reports       Report[] @relation("UserReports")
  reportedItems Report[] @relation("ReportedUser")
  
  // Teams
  teamMemberships TeamMember[]
  ownedTeams      Team[] @relation("TeamOwner")
  
  // Notifications
  notifications Notification[]
  
  // Analytics
  events        AnalyticsEvent[]
  
  // API Keys
  apiKeys       ApiKey[]
  
  // ========== ENTERPRISE FEATURES ==========
  
  // Enterprise tenant
  tenantId                String?
  tenant                  Tenant?                  @relation(fields: [tenantId], references: [id])
  
  // Workflow system
  workflows               PromptWorkflow[]
  workflowExecutions      WorkflowExecution[]
  
  // A/B Testing
  experiments             PromptExperiment[]
  experimentResults       PromptExperimentResult[]
  
  // Coaching
  coachPreference         UserCoachPreference?
  
  // Certification
  certifications          UserCertification[]
  
  // Git system
  repositories            PromptRepository[]
  commits                 PromptCommit[]
  
  // Marketplace
  marketplaceListings     MarketplaceListing[]     @relation("MarketplaceSeller")
  marketplacePurchases    MarketplacePurchase[]    @relation("MarketplaceBuyer")
  marketplaceReviews      MarketplaceReview[]
  marketplaceEarnings     Float                    @default(0)
  pendingPayout           Float                    @default(0)
  
  // Security & Audit
  auditLogs               AuditLog[]
  securityScans           SecurityScan[]
  
  // Performance
  performanceMetrics      PerformanceMetric[]
  
  // Revenue
  revenueTransactions     RevenueTransaction[]
  
  @@map("users")
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  theme                 String  @default("light") // light, dark, system
  language              String  @default("en")
  timezone              String  @default("UTC")
  
  // Notifications
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  weeklyDigest          Boolean @default(true)
  communityUpdates      Boolean @default(true)
  
  // Privacy
  profileVisibility     String  @default("public") // public, followers, private
  showEmail             Boolean @default(false)
  showLocation          Boolean @default(true)
  
  // AI Settings
  defaultModel          String  @default("gpt-4")
  aiCoachingEnabled     Boolean @default(true)
  autoImprovement       Boolean @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("user_preferences")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core Prompt System
model Prompt {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String?
  originalPrompt  String   @db.Text
  improvedPrompt  String?  @db.Text
  output          String?  @db.Text
  
  model           String   @default("gpt-4")
  temperature     Float    @default(0.7)
  maxTokens       Int      @default(2000)
  
  // Metadata
  category        String?
  tags            String[]
  isPublic        Boolean  @default(false)
  language        String   @default("en")
  
  // Metrics
  improvementScore Float?
  executionTime    Int? // milliseconds
  tokenCount       Int?
  cost             Float? // USD
  
  // Engagement
  views           Int      @default(0)
  likes           Like[]
  comments        Comment[]
  forks           Prompt[] @relation("PromptForks")
  forkedFrom      Prompt?  @relation("PromptForks", fields: [forkedFromId], references: [id])
  forkedFromId    String?
  
  // Versioning
  version         Int      @default(1)
  parentVersion   Prompt?  @relation("PromptVersions", fields: [parentVersionId], references: [id])
  parentVersionId String?
  childVersions   Prompt[] @relation("PromptVersions")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // ========== ENTERPRISE FEATURES ==========
  
  // Marketplace
  marketplaceListings     MarketplaceListing[]
  
  // DNA Analysis
  dna                     PromptDNA?
  
  // Security
  securityScans           SecurityScan[]
  
  // Performance
  performanceMetrics      PerformanceMetric[]
  
  @@map("prompts")
}

// Template System
model Template {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?  @db.Text
  content         String   @db.Text
  variables       Json     @default("[]") // Array of variable definitions
  
  category        String
  subcategory     String?
  tags            String[]
  difficulty      String   @default("beginner") // beginner, intermediate, advanced
  
  // Usage stats
  usageCount      Int      @default(0)
  rating          Float    @default(0.0)
  ratingCount     Int      @default(0)
  
  // Visibility
  isPublic        Boolean  @default(false)
  isOfficial      Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  
  // Versioning
  version         Int      @default(1)
  changelog       String?  @db.Text
  
  // Relations
  likes           Like[]
  comments        Comment[]
  ratings         TemplateRating[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // ========== ENTERPRISE FEATURES ==========
  
  // Marketplace
  marketplaceListings     MarketplaceListing[]
  
  @@map("templates")
}

model TemplateRating {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  rating     Int      @db.SmallInt // 1-5
  review     String?  @db.Text
  createdAt  DateTime @default(now())
  
  @@unique([userId, templateId])
  @@map("template_ratings")
}

// Gamification System
model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Points and levels
  totalPoints      Int      @default(0)
  weeklyPoints     Int      @default(0)
  monthlyPoints    Int      @default(0)
  level            Int      @default(1)
  experience       Int      @default(0)
  
  // Streaks
  currentStreak    Int      @default(0)
  longestStreak    Int      @default(0)
  lastActivityDate DateTime @default(now())
  
  // Stats
  promptsCreated   Int      @default(0)
  templatesCreated Int      @default(0)
  challengesWon    Int      @default(0)
  lessonsCompleted Int      @default(0)
  
  // Rankings
  globalRank       Int?
  weeklyRank       Int?
  monthlyRank      Int?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("user_profiles")
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String      @db.Text
  icon        String
  category    String      // achievement, skill, special, community
  rarity      String      @default("common") // common, uncommon, rare, epic, legendary
  points      Int         @default(0)
  
  // Requirements
  requirements Json       @default("{}")
  
  // Stats
  earnedCount Int         @default(0)
  
  users       UserBadge[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  earnedAt  DateTime @default(now())
  context   Json?    @default("{}")
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String   // daily_goal, weekly_challenge, milestone
  category    String   // prompts, learning, community, skills
  title       String
  description String?
  points      Int      @default(0)
  
  metadata    Json?    @default("{}")
  
  completedAt DateTime @default(now())
  
  @@map("achievements")
}

// Skills System
model Skill {
  id            String             @id @default(cuid())
  name          String             @unique
  slug          String             @unique
  description   String             @db.Text
  category      String
  icon          String?
  
  // Assessment criteria
  rubric        Json               @default("{}")
  
  userSkills    UserSkills[]
  assessments   SkillAssessment[]
  lessons       Lesson[]
  
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  @@map("skills")
}

model UserSkills {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Skill scores (0-100)
  specificity      Float @default(0)
  constraints      Float @default(0)
  structure        Float @default(0)
  roleDefinition   Float @default(0)
  outputFormat     Float @default(0)
  verification     Float @default(0)
  safety           Float @default(0)
  
  // Overall metrics
  overallScore     Float @default(0)
  assessmentCount  Int   @default(0)
  lastAssessment   DateTime?
  
  skills           Json  @default("{}") // Dynamic skill tracking
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("user_skills")
}

model SkillAssessment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  prompt      String   @db.Text
  response    String   @db.Text
  scores      Json     @default("{}") // Detailed scoring breakdown
  overallScore Float
  
  feedback    String?  @db.Text
  suggestions String?  @db.Text
  
  createdAt   DateTime @default(now())
  
  @@map("skill_assessments")
}

// Learning System
model LearningPath {
  id            String             @id @default(cuid())
  name          String
  slug          String             @unique
  description   String             @db.Text
  difficulty    String             @default("beginner")
  estimatedTime Int                // minutes
  
  // Structure
  lessons       Lesson[]
  prerequisites String[]           // skill requirements
  
  // Stats
  enrolledCount Int                @default(0)
  completionRate Float             @default(0)
  rating        Float              @default(0)
  
  isPublished   Boolean            @default(false)
  
  users         UserLearningPath[]
  
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  @@map("learning_paths")
}

model Lesson {
  id             String           @id @default(cuid())
  pathId         String
  path           LearningPath     @relation(fields: [pathId], references: [id], onDelete: Cascade)
  skillId        String?
  skill          Skill?           @relation(fields: [skillId], references: [id])
  
  title          String
  slug           String
  description    String?          @db.Text
  content        String           @db.Text // Markdown content
  
  type           String           @default("text") // text, video, interactive, quiz
  duration       Int              @default(0) // minutes
  order          Int
  
  // Interactive elements
  exercises      Json?            @default("[]")
  quiz           Json?            @default("{}")
  
  // Prerequisites
  prerequisites  String[]
  
  progress       LessonProgress[]
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@unique([pathId, slug])
  @@map("lessons")
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  status      String   @default("not_started") // not_started, in_progress, completed
  progress    Float    @default(0) // 0-100
  score       Float?   // Quiz score
  timeSpent   Int      @default(0) // minutes
  
  startedAt   DateTime?
  completedAt DateTime?
  
  // Spaced repetition
  reviewCount Int      @default(0)
  nextReview  DateTime?
  difficulty  Float    @default(2.5) // SM-2 algorithm
  interval    Int      @default(1) // days
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model UserLearningPath {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathId       String
  path         LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  
  status       String       @default("enrolled") // enrolled, in_progress, completed, dropped
  progress     Float        @default(0) // 0-100
  
  enrolledAt   DateTime     @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  
  @@unique([userId, pathId])
  @@map("user_learning_paths")
}

// Challenge System
model Challenge {
  id             String               @id @default(cuid())
  title          String
  slug           String               @unique
  description    String               @db.Text
  
  type           String               // daily, weekly, monthly, special
  category       String               // speed, accuracy, creativity, safety
  difficulty     String               @default("medium")
  
  // Challenge details
  prompt         String               @db.Text
  requirements   Json                 @default("{}")
  rubric         Json                 @default("{}")
  
  // Timing
  startDate      DateTime
  endDate        DateTime
  
  // Rewards
  points         Int                  @default(100)
  badgeId        String?
  
  // Stats
  participantCount Int                @default(0)
  submissionCount  Int                @default(0)
  
  isActive       Boolean              @default(true)
  isFeatured     Boolean              @default(false)
  
  participants   ChallengeParticipant[]
  submissions    ChallengeSubmission[]
  
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  
  @@map("challenges")
}

model ChallengeParticipant {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  joinedAt    DateTime  @default(now())
  
  @@unique([userId, challengeId])
  @@map("challenge_participants")
}

model ChallengeSubmission {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  prompt      String    @db.Text
  output      String    @db.Text
  
  // Scoring
  score       Float     @default(0)
  rank        Int?
  
  // Metadata
  model       String
  tokenCount  Int?
  executionTime Int?
  
  isPublic    Boolean   @default(true)
  
  submittedAt DateTime  @default(now())
  
  @@unique([userId, challengeId])
  @@map("challenge_submissions")
}

// Community System
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Polymorphic relationships
  promptId   String?
  prompt     Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  commentId  String?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([userId, promptId])
  @@unique([userId, templateId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Comment {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  content    String    @db.Text
  
  // Polymorphic relationships
  promptId   String?
  prompt     Prompt?   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Threading
  parentId   String?
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  
  // Engagement
  likes      Like[]
  
  // Moderation
  isEdited   Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@map("comments")
}

model Report {
  id         String   @id @default(cuid())
  reporterId String
  reporter   User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  // What's being reported
  reportedUserId String?
  reportedUser   User?    @relation("ReportedUser", fields: [reportedUserId], references: [id])
  promptId       String?
  templateId     String?
  commentId      String?
  
  reason         String   // spam, inappropriate, copyright, other
  description    String?  @db.Text
  
  status         String   @default("pending") // pending, reviewed, resolved, dismissed
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("reports")
}

// Team System
model Team {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?      @db.Text
  avatar      String?
  
  ownerId     String
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Settings
  isPublic    Boolean      @default(false)
  allowInvites Boolean     @default(true)
  maxMembers  Int          @default(50)
  
  // Stats
  memberCount Int          @default(1)
  
  members     TeamMember[]
  invites     TeamInvite[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role     String   @default("member") // owner, admin, member
  
  joinedAt DateTime @default(now())
  
  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamInvite {
  id       String   @id @default(cuid())
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  email    String
  role     String   @default("member")
  token    String   @unique
  
  invitedById String
  expiresAt   DateTime
  acceptedAt  DateTime?
  
  createdAt   DateTime @default(now())
  
  @@map("team_invites")
}

// Notification System
model Notification {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type     String   // like, comment, follow, badge, achievement, etc.
  title    String
  message  String?  @db.Text
  
  // Associated data
  data     Json?    @default("{}")
  
  // Status
  isRead   Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  @@map("notifications")
}

// Analytics System
model AnalyticsEvent {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  sessionId  String
  event      String   // page_view, prompt_created, template_used, etc.
  
  properties Json     @default("{}")
  
  // Request context
  userAgent  String?
  ip         String?
  referrer   String?
  
  timestamp  DateTime @default(now())
  
  @@index([event, timestamp])
  @@index([userId, timestamp])
  @@map("analytics_events")
}

// API Key Management
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  key         String   @unique // Hashed
  permissions Json     @default("[]") // Array of permission strings
  
  // Usage tracking
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  // Status
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("api_keys")
}

// ===============================
// 🚀 ENTERPRISE FEATURES SUITE
// ===============================

// 1. AI-Powered Prompt Workflows
model PromptWorkflow {
  id            String               @id @default(cuid())
  userId        String
  user          User                 @relation(fields: [userId], references: [id])
  name          String
  description   String?
  tags          String[]
  isPublic      Boolean              @default(false)
  nodes         PromptWorkflowNode[]
  edges         PromptWorkflowEdge[]
  variables     Json                 @default("{}")
  runCount      Int                  @default(0)
  lastRunAt     DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  // Relations
  marketplaceListings MarketplaceListing[]
  executions          WorkflowExecution[]

  @@map("prompt_workflows")
}

model PromptWorkflowNode {
  id          String          @id @default(cuid())
  workflowId  String
  workflow    PromptWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  type        String          // prompt, condition, merge, split, loop, transform
  position    Json            // {x: number, y: number}
  data        Json            // node-specific data
  outputs     Json            @default("[]")
  createdAt   DateTime        @default(now())

  @@map("prompt_workflow_nodes")
}

model PromptWorkflowEdge {
  id          String          @id @default(cuid())
  workflowId  String
  workflow    PromptWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  sourceId    String
  targetId    String
  condition   String?         // JavaScript expression
  label       String?

  @@map("prompt_workflow_edges")
}

model WorkflowExecution {
  id          String          @id @default(cuid())
  workflowId  String
  workflow    PromptWorkflow  @relation(fields: [workflowId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  inputs      Json
  outputs     Json?
  status      String          @default("running") // running, completed, failed
  error       String?
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  duration    Int?            // milliseconds

  @@map("workflow_executions")
}

// 2. A/B Testing Framework
model PromptExperiment {
  id              String                    @id @default(cuid())
  userId          String
  user            User                      @relation(fields: [userId], references: [id])
  name            String
  hypothesis      String
  status          String                    @default("draft") // draft, running, completed, cancelled
  variants        PromptVariant[]
  metrics         Json                      // {primary: string, secondary: string[]}
  sampleSize      Int
  confidenceLevel Float                     @default(0.95)
  startedAt       DateTime?
  completedAt     DateTime?
  winner          String?                   // variant ID
  results         PromptExperimentResult[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@map("prompt_experiments")
}

model PromptVariant {
  id            String              @id @default(cuid())
  experimentId  String
  experiment    PromptExperiment    @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  name          String
  prompt        String              @db.Text
  allocation    Float               @default(0.5) // traffic percentage
  impressions   Int                 @default(0)
  conversions   Int                 @default(0)
  metrics       Json                @default("{}")

  @@map("prompt_variants")
}

model PromptExperimentResult {
  id           String           @id @default(cuid())
  experimentId String
  experiment   PromptExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variantId    String
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  converted    Boolean          @default(false)
  metrics      Json             @default("{}")
  timestamp    DateTime         @default(now())

  @@map("prompt_experiment_results")
}

// 3. AI Coach Personalities
model CoachPersonality {
  id              String                 @id @default(cuid())
  name            String                 @unique
  displayName     String
  avatar          String
  description     String
  tone            String                 // formal, casual, friendly, strict, analytical
  responseStyle   Json                   // {brevity: 'concise'|'detailed', examples: boolean, analogies: boolean}
  specialties     String[]
  motivationStyle String                 // encouraging, challenging, balanced, tough-love
  feedbackStyle   Json                   // {positive_first: boolean, directness: 0-1, suggestion_rate: 0-1}
  personality     Json                   // Full personality configuration
  isActive        Boolean                @default(true)
  usageCount      Int                    @default(0)
  preferences     UserCoachPreference[]

  @@map("coach_personalities")
}

model UserCoachPreference {
  id            String            @id @default(cuid())
  userId        String            @unique
  user          User              @relation(fields: [userId], references: [id])
  personalityId String
  personality   CoachPersonality  @relation(fields: [personalityId], references: [id])
  customization Json?             // User-specific overrides
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("user_coach_preferences")
}

// 4. Certification System
model PromptCertification {
  id              String                @id @default(cuid())
  level           String                // bronze, silver, gold, platinum, master
  name            String
  description     String
  requirements    Json                  // Detailed requirements
  benefits        Json                  // What users get
  icon            String
  color           String
  sortOrder       Int
  isActive        Boolean               @default(true)
  users           UserCertification[]

  @@map("prompt_certifications")
}

model UserCertification {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  certificationId   String
  certification     PromptCertification @relation(fields: [certificationId], references: [id])
  progress          Json                // Detailed progress tracking
  status            String              // in_progress, completed, expired
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  expiresAt         DateTime?
  certificate       String?             // Certificate ID/URL
  
  @@unique([userId, certificationId])
  @@map("user_certifications")
}

model CertificationRequirement {
  id              String   @id @default(cuid())
  certificationId String
  type            String   // prompt_count, quality_score, peer_review, test, project
  metric          String
  target          Float
  description     String

  @@map("certification_requirements")
}

// 5. Prompt Git Version Control
model PromptRepository {
  id              String            @id @default(cuid())
  name            String
  description     String?
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  defaultBranch   String            @default("main")
  branches        PromptBranch[]
  commits         PromptCommit[]
  tags            PromptTag[]
  isPublic        Boolean           @default(false)
  stars           Int               @default(0)
  forks           Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("prompt_repositories")
}

model PromptBranch {
  id              String            @id @default(cuid())
  repositoryId    String
  repository      PromptRepository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  name            String
  headCommitId    String?
  headCommit      PromptCommit?     @relation("BranchHead", fields: [headCommitId], references: [id])
  protected       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  
  @@unique([repositoryId, name])
  @@map("prompt_branches")
}

model PromptCommit {
  id              String            @id @default(cuid())
  repositoryId    String
  repository      PromptRepository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  message         String
  content         String            @db.Text
  diff            Json
  parentId        String?
  parent          PromptCommit?     @relation("CommitHistory", fields: [parentId], references: [id])
  children        PromptCommit[]    @relation("CommitHistory")
  authorId        String
  author          User              @relation(fields: [authorId], references: [id])
  timestamp       DateTime          @default(now())
  hash            String            @unique
  
  // Relations
  branches        PromptBranch[]    @relation("BranchHead")

  @@map("prompt_commits")
}

model PromptTag {
  id           String           @id @default(cuid())
  repositoryId String
  repository   PromptRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  name         String
  commitId     String
  message      String?
  createdAt    DateTime         @default(now())

  @@unique([repositoryId, name])
  @@map("prompt_tags")
}

// 6. Marketplace
model MarketplaceListing {
  id              String                  @id @default(cuid())
  promptId        String?
  prompt          Prompt?                 @relation(fields: [promptId], references: [id])
  templateId      String?
  template        Template?               @relation(fields: [templateId], references: [id])
  workflowId      String?
  workflow        PromptWorkflow?         @relation(fields: [workflowId], references: [id])
  
  sellerId        String
  seller          User                    @relation("MarketplaceSeller", fields: [sellerId], references: [id])
  
  title           String
  description     String                  @db.Text
  category        String
  tags            String[]
  
  price           Float
  currency        String                  @default("USD")
  licensingType   String                  // personal, commercial, enterprise
  
  // Stats
  views           Int                     @default(0)
  purchases       Int                     @default(0)
  revenue         Float                   @default(0)
  rating          Float                   @default(0)
  
  // Marketplace features
  featured        Boolean                 @default(false)
  verified        Boolean                 @default(false)
  
  status          String                  @default("pending") // pending, active, suspended
  
  purchases       MarketplacePurchase[]
  reviews         MarketplaceReview[]
  
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@map("marketplace_listings")
}

model MarketplacePurchase {
  id              String                  @id @default(cuid())
  listingId       String
  listing         MarketplaceListing      @relation(fields: [listingId], references: [id])
  buyerId         String
  buyer           User                    @relation("MarketplaceBuyer", fields: [buyerId], references: [id])
  
  price           Float
  currency        String
  licensingType   String
  
  transactionId   String                  @unique
  paymentMethod   String
  paymentStatus   String                  @default("pending")
  
  downloadCount   Int                     @default(0)
  lastDownload    DateTime?
  
  createdAt       DateTime                @default(now())

  @@map("marketplace_purchases")
}

model MarketplaceReview {
  id        String              @id @default(cuid())
  listingId String
  listing   MarketplaceListing  @relation(fields: [listingId], references: [id])
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  rating    Int                 // 1-5 stars
  review    String?
  helpful   Int                 @default(0)
  createdAt DateTime            @default(now())

  @@unique([listingId, userId])
  @@map("marketplace_reviews")
}

// 7. Enterprise Features
model Tenant {
  id                String              @id @default(cuid())
  name              String
  domain            String              @unique
  plan              String              @default("enterprise")
  settings          Json                @default("{}")
  dataResidency     String              @default("us-east")
  
  // Features
  customBranding    Json?
  apiLimits         Json                @default("{}")
  
  users             User[]
  ssoConfigs        SSOConfiguration[]
  auditLogs         AuditLog[]
  customModels      CustomModel[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("tenants")
}

model SSOConfiguration {
  id       String  @id @default(cuid())
  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  type     String  // saml, oidc, ldap
  config   Json    // Provider-specific configuration
  enabled  Boolean @default(true)

  @@map("sso_configurations")
}

model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  action     String
  resource   String
  resourceId String?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  result     String   // success, failure
  metadata   Json?
  signature  String   // For tamper detection
  timestamp  DateTime @default(now())

  @@index([action, timestamp])
  @@index([userId, timestamp])
  @@map("audit_logs")
}

model CustomModel {
  id            String  @id @default(cuid())
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id])
  name          String
  type          String  // api, finetuned, hosted
  endpoint      String
  authentication Json   // Encrypted credentials
  capabilities  Json
  pricing       Json?
  isActive      Boolean @default(true)

  @@map("custom_models")
}

// 8. Prompt DNA System
model PromptDNA {
  id           String   @id @default(cuid())
  promptId     String   @unique
  prompt       Prompt   @relation(fields: [promptId], references: [id])
  fingerprint  String   @unique
  style        String
  complexity   String
  domain       String
  structure    Json
  traits       Json     // Genetic traits
  generation   Int      @default(0)
  lineage      String[] // Parent fingerprints
  mutations    Json     @default("[]")
  createdAt    DateTime @default(now())

  @@index([fingerprint])
  @@map("prompt_dna")
}

// 9. Security Scanner
model SecurityScan {
  id             String   @id @default(cuid())
  promptId       String
  prompt         Prompt   @relation(fields: [promptId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  riskScore      Float
  vulnerabilities Json    // Array of vulnerabilities
  recommendations Json    // Array of recommendations
  sanitizedPrompt String? @db.Text
  timestamp      DateTime @default(now())

  @@map("security_scans")
}

// 10. Performance Metrics
model PerformanceMetric {
  id            String   @id @default(cuid())
  promptId      String?
  prompt        Prompt?  @relation(fields: [promptId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  metric        String   // token_efficiency, response_quality, cost_per_request
  value         Float
  model         String
  timestamp     DateTime @default(now())

  @@index([metric, timestamp])
  @@index([userId, timestamp])
  @@map("performance_metrics")
}

// 11. Revenue & Payouts
model RevenueTransaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  currency  String   @default("USD")
  type      String   // marketplace_sale, referral, bonus
  status    String   @default("pending") // pending, completed, failed
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("revenue_transactions")
}

