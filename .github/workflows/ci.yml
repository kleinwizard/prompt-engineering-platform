name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prompt_platform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install API dependencies
        run: cd apps/api && npm ci

      - name: Install Web dependencies
        run: cd apps/web && npm ci

      - name: Setup test environment
        run: |
          cp apps/api/.env.example apps/api/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/prompt_platform_test" >> apps/api/.env.test
          echo "REDIS_URL=redis://localhost:6379" >> apps/api/.env.test

      - name: Generate Prisma client
        run: cd apps/api && npx prisma generate

      - name: Run database migrations
        run: cd apps/api && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prompt_platform_test

      - name: Lint API
        run: cd apps/api && npm run lint:check

      - name: Lint Web
        run: cd apps/web && npm run lint:check

      - name: Type check API
        run: cd apps/api && npm run typecheck

      - name: Type check Web
        run: cd apps/web && npm run type-check

      - name: Test API
        run: cd apps/api && npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prompt_platform_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-jwt-refresh-secret

      - name: Test Web
        run: cd apps/web && npm run test:ci

      - name: E2E Test API
        run: cd apps/api && npm run test:e2e:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prompt_platform_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-jwt-refresh-secret

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install API dependencies
        run: cd apps/api && npm ci

      - name: Install Web dependencies
        run: cd apps/web && npm ci

      - name: Generate Prisma client
        run: cd apps/api && npx prisma generate

      - name: Build API
        run: cd apps/api && npm run build

      - name: Build Web
        run: cd apps/web && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/web/.next/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security:audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prompt_platform
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci

      - name: Install API dependencies
        run: cd apps/api && npm ci

      - name: Setup environment
        run: |
          cp apps/api/.env.example apps/api/.env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/prompt_platform" >> apps/api/.env
          echo "REDIS_URL=redis://localhost:6379" >> apps/api/.env
          echo "JWT_SECRET=test-jwt-secret" >> apps/api/.env
          echo "JWT_REFRESH_SECRET=test-jwt-refresh-secret" >> apps/api/.env

      - name: Generate Prisma client
        run: cd apps/api && npx prisma generate

      - name: Run database migrations
        run: cd apps/api && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prompt_platform

      - name: Start API server
        run: cd apps/api && npm run start:prod &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prompt_platform
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-jwt-refresh-secret

      - name: Wait for API startup
        run: sleep 30

      - name: Health check API
        run: |
          curl -f http://localhost:3001/health || exit 1
          echo "API health check passed"

      - name: Test API endpoints
        run: |
          # Test basic endpoints
          curl -f http://localhost:3001/health
          curl -f http://localhost:3001/api/v1/auth/status
          
          # Test with timeout
          timeout 10s curl -f http://localhost:3001/health || {
            echo "Health check failed or timed out"
            exit 1
          }

      - name: Stop services
        if: always()
        run: |
          pkill -f "node.*dist/main" || true
          sleep 5

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, health-check]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, health-check]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
