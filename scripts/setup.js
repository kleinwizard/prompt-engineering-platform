#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üöÄ Setting up Prompt Engineering Platform...\n');

// Color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function generateSecureKey(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

function checkPrerequisites() {
  log('üìã Checking prerequisites...', colors.blue);
  
  try {
    execSync('node --version', { stdio: 'ignore' });
    log('‚úÖ Node.js is installed');
  } catch {
    log('‚ùå Node.js is not installed. Please install Node.js 20+', colors.red);
    process.exit(1);
  }
  
  try {
    execSync('docker --version', { stdio: 'ignore' });
    log('‚úÖ Docker is installed');
  } catch {
    log('‚ùå Docker is not installed. Please install Docker', colors.red);
    process.exit(1);
  }
  
  try {
    execSync('docker-compose --version', { stdio: 'ignore' });
    log('‚úÖ Docker Compose is installed');
  } catch {
    log('‚ùå Docker Compose is not installed', colors.red);
    process.exit(1);
  }
}

function setupEnvironmentFiles() {
  log('\nüìÑ Setting up environment files...', colors.blue);
  
  const apiEnvPath = path.join('apps', 'api', '.env');
  const webEnvPath = path.join('apps', 'web', '.env');
  
  // Generate secure keys
  const jwtSecret = generateSecureKey(32);
  const jwtRefreshSecret = generateSecureKey(32);
  const encryptionKey = generateSecureKey(32);
  const nextAuthSecret = generateSecureKey(32);
  
  // API environment
  if (!fs.existsSync(apiEnvPath)) {
    const apiEnv = `# Generated by setup script
NODE_ENV=development
PORT=3000
CORS_ORIGIN=http://localhost:3001

# Database
DATABASE_URL=postgresql://prompt_user:prompt_password@localhost:5432/prompt_platform

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=redis_password
REDIS_DB=0

# JWT
JWT_SECRET=${jwtSecret}
JWT_EXPIRES_IN=15m
JWT_REFRESH_SECRET=${jwtRefreshSecret}
JWT_REFRESH_EXPIRES_IN=7d

# Encryption
ENCRYPTION_KEY=${encryptionKey}

# Rate Limiting
THROTTLE_SHORT_LIMIT=10
THROTTLE_MEDIUM_LIMIT=50
THROTTLE_LONG_LIMIT=100

# File Storage
STORAGE_PROVIDER=minio
MINIO_ENDPOINT=http://localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin123
MINIO_BUCKET=prompt-platform

# Email
EMAIL_PROVIDER=smtp
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_SECURE=false
SMTP_USER=
SMTP_PASS=

# Search
ELASTICSEARCH_URL=http://localhost:9200
ELASTICSEARCH_AUTH=false

# LLM Providers (Add your API keys)
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GOOGLE_API_KEY=
AZURE_OPENAI_API_KEY=
AZURE_OPENAI_ENDPOINT=
OLLAMA_BASE_URL=http://localhost:11434

# Analytics
ANALYTICS_ENABLED=true
ANALYTICS_PROVIDER=internal

# Monitoring
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090

# Feature Flags
FEATURE_REGISTRATION=true
FEATURE_SOCIAL_LOGIN=false
FEATURE_TEAMS=true
FEATURE_REALTIME=true
FEATURE_AI_COACHING=true
`;
    fs.writeFileSync(apiEnvPath, apiEnv);
    log('‚úÖ Created apps/api/.env');
  }
  
  // Web environment
  if (!fs.existsSync(webEnvPath)) {
    const webEnv = `# Generated by setup script
NEXTAUTH_URL=http://localhost:3001
NEXTAUTH_SECRET=${nextAuthSecret}

# API
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_WS_URL=ws://localhost:3000

# Analytics (Optional)
NEXT_PUBLIC_POSTHOG_KEY=
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# Feature Flags
NEXT_PUBLIC_FEATURE_SOCIAL_LOGIN=false
NEXT_PUBLIC_FEATURE_TEAMS=true
NEXT_PUBLIC_FEATURE_REALTIME=true

# Database (for NextAuth)
DATABASE_URL=postgresql://prompt_user:prompt_password@localhost:5432/prompt_platform
`;
    fs.writeFileSync(webEnvPath, webEnv);
    log('‚úÖ Created apps/web/.env');
  }
}

function installDependencies() {
  log('\nüì¶ Installing dependencies...', colors.blue);
  
  try {
    execSync('npm install', { stdio: 'inherit' });
    log('‚úÖ Dependencies installed');
  } catch (error) {
    log('‚ùå Failed to install dependencies', colors.red);
    process.exit(1);
  }
}

function startInfrastructure() {
  log('\nüê≥ Starting infrastructure services...', colors.blue);
  
  try {
    execSync('cd infrastructure/docker && docker-compose up -d', { stdio: 'inherit' });
    log('‚úÖ Infrastructure services started');
    
    log('‚è≥ Waiting for services to be ready (30 seconds)...', colors.yellow);
    execSync('sleep 30', { stdio: 'ignore' });
    
  } catch (error) {
    log('‚ùå Failed to start infrastructure services', colors.red);
    log('Make sure Docker is running and try again', colors.yellow);
    process.exit(1);
  }
}

function setupDatabase() {
  log('\nüóÉÔ∏è Setting up database...', colors.blue);
  
  try {
    // Generate Prisma client
    execSync('cd apps/api && npx prisma generate', { stdio: 'inherit' });
    log('‚úÖ Prisma client generated');
    
    // Run migrations
    execSync('cd apps/api && npx prisma migrate dev --name init', { stdio: 'inherit' });
    log('‚úÖ Database migrations applied');
    
    // Seed data
    execSync('cd apps/api && npx prisma db seed', { stdio: 'inherit' });
    log('‚úÖ Database seeded with initial data');
    
  } catch (error) {
    log('‚ùå Failed to setup database', colors.red);
    log('Make sure PostgreSQL is running and check your DATABASE_URL', colors.yellow);
    process.exit(1);
  }
}

function displayNextSteps() {
  log('\nüéâ Setup completed successfully!', colors.green);
  log('\nüåê Services available at:', colors.cyan);
  log('  ‚Ä¢ Web App:          http://localhost:3001');
  log('  ‚Ä¢ API:              http://localhost:3000');
  log('  ‚Ä¢ API Docs:         http://localhost:3000/api/docs');
  log('  ‚Ä¢ PostgreSQL:       localhost:5432');
  log('  ‚Ä¢ Redis:            localhost:6379');
  log('  ‚Ä¢ Elasticsearch:    http://localhost:9200');
  log('  ‚Ä¢ MinIO:            http://localhost:9001');
  log('  ‚Ä¢ Prometheus:       http://localhost:9090');
  log('  ‚Ä¢ Grafana:          http://localhost:3030 (admin/admin)');
  log('  ‚Ä¢ MailHog:          http://localhost:8025');
  
  log('\nüöÄ To start the development servers:', colors.bright);
  log('  npm run dev');
  
  log('\nüìù Next steps:', colors.yellow);
  log('  1. Add your LLM API keys to apps/api/.env');
  log('  2. Configure any additional services (email, analytics)');
  log('  3. Start the development servers');
  log('  4. Visit http://localhost:3001 to begin!');
  
  log('\nüìö Documentation:', colors.blue);
  log('  ‚Ä¢ README.md - Complete setup guide');
  log('  ‚Ä¢ docs/ - Detailed documentation');
  log('  ‚Ä¢ API Docs - http://localhost:3000/api/docs');
  
  log('\nüí° Demo User (Development):', colors.cyan);
  log('  Email: demo@promptplatform.com');
  log('  Password: Demo123!');
}

// Main execution
async function main() {
  try {
    checkPrerequisites();
    setupEnvironmentFiles();
    installDependencies();
    startInfrastructure();
    setupDatabase();
    displayNextSteps();
  } catch (error) {
    log(`\n‚ùå Setup failed: ${error.message}`, colors.red);
    log('\nFor help, check:', colors.yellow);
    log('  ‚Ä¢ README.md for detailed instructions');
    log('  ‚Ä¢ GitHub Issues for community support');
    process.exit(1);
  }
}

main();